// Popup script cho MaxImg Proxy extension
// X·ª≠ l√Ω giao di·ªán v√† logic b·∫≠t/t·∫Øt proxy

document.addEventListener('DOMContentLoaded', function() {
  const toggleBtn = document.getElementById('toggleBtn');
  const statusElement = document.getElementById('status');
  const statusText = document.getElementById('status-text');
  const btnText = document.getElementById('btn-text');
  
  let isLoading = false;
  
  // C·∫≠p nh·∫≠t giao di·ªán d·ª±a tr√™n tr·∫°ng th√°i
  function updateUI(enabled) {
    if (enabled) {
      statusElement.className = 'status enabled';
      statusText.textContent = '‚úÖ Proxy ƒêang B·∫≠t';
      
      toggleBtn.className = 'toggle-btn enabled';
      btnText.textContent = 'üî¥ T·∫Øt Proxy';
    } else {
      statusElement.className = 'status disabled';
      statusText.textContent = '‚ö´ Proxy ƒêang T·∫Øt';
      
      toggleBtn.className = 'toggle-btn';
      btnText.textContent = 'üü¢ B·∫≠t Proxy';
    }
    
    // Animation cho status change
    statusElement.classList.add('status-changing');
    setTimeout(() => {
      statusElement.classList.remove('status-changing');
    }, 300);
  }
  
  // Hi·ªÉn th·ªã tr·∫°ng th√°i loading
  function setLoading(loading) {
    isLoading = loading;
    const container = document.querySelector('.container');
    
    if (loading) {
      container.classList.add('loading');
      btnText.innerHTML = '<span class="spinner"></span>ƒêang x·ª≠ l√Ω...';
      toggleBtn.disabled = true;
    } else {
      container.classList.remove('loading');
      toggleBtn.disabled = false;
    }
  }
  
  // L·∫•y tr·∫°ng th√°i hi·ªán t·∫°i t·ª´ background script
  function getCurrentState() {
    chrome.runtime.sendMessage(
      { action: 'getProxyState' },
      function(response) {
        if (chrome.runtime.lastError) {
          console.error('Error getting proxy state:', chrome.runtime.lastError);
          statusText.textContent = '‚ùå L·ªói k·∫øt n·ªëi';
          btnText.textContent = 'Th·ª≠ l·∫°i';
          return;
        }
        
        updateUI(response.enabled);
      }
    );
  }
  
  // X·ª≠ l√Ω khi click n√∫t toggle
  toggleBtn.addEventListener('click', function() {
    if (isLoading) return;
    
    setLoading(true);
    
    // G·ª≠i message ƒë·∫øn background script ƒë·ªÉ toggle proxy
    chrome.runtime.sendMessage(
      { action: 'toggleProxy' },
      function(response) {
        setLoading(false);
        
        if (chrome.runtime.lastError) {
          console.error('Error toggling proxy:', chrome.runtime.lastError);
          statusText.textContent = '‚ùå L·ªói khi thay ƒë·ªïi';
          btnText.textContent = 'Th·ª≠ l·∫°i';
          return;
        }
        
        if (response.success) {
          updateUI(response.enabled);
          
          // Hi·ªÉn th·ªã th√¥ng b√°o ng·∫Øn
          const originalText = statusText.textContent;
          statusText.textContent = response.enabled ? 
            '‚ú® ƒê√£ b·∫≠t proxy!' : '‚ú® ƒê√£ t·∫Øt proxy!';
          
          setTimeout(() => {
            updateUI(response.enabled);
          }, 1500);
          
          // T·ª± ƒë·ªông ƒë√≥ng popup sau khi th√†nh c√¥ng (optional)
          setTimeout(() => {
            window.close();
          }, 2000);
        } else {
          statusText.textContent = '‚ùå C√≥ l·ªói x·∫£y ra';
          btnText.textContent = 'Th·ª≠ l·∫°i';
        }
      }
    );
  });
  
  // L·∫Øng nghe thay ƒë·ªïi storage ƒë·ªÉ c·∫≠p nh·∫≠t UI real-time
  chrome.storage.onChanged.addListener(function(changes, namespace) {
    if (namespace === 'local' && changes.proxyEnabled) {
      updateUI(changes.proxyEnabled.newValue);
    }
  });
  
  // Keyboard shortcuts
  document.addEventListener('keydown', function(e) {
    // Space ho·∫∑c Enter ƒë·ªÉ toggle
    if (e.code === 'Space' || e.code === 'Enter') {
      e.preventDefault();
      toggleBtn.click();
    }
    
    // Escape ƒë·ªÉ ƒë√≥ng popup
    if (e.code === 'Escape') {
      window.close();
    }
  });
  
  // Th√™m hover effects b·∫±ng JavaScript
  toggleBtn.addEventListener('mouseenter', function() {
    if (!isLoading) {
      this.style.transform = 'translateY(-2px)';
    }
  });
  
  toggleBtn.addEventListener('mouseleave', function() {
    this.style.transform = 'translateY(0)';
  });
  
  // Focus tr√™n button ƒë·ªÉ c√≥ th·ªÉ d√πng keyboard
  toggleBtn.focus();
  
  // T·∫£i tr·∫°ng th√°i ban ƒë·∫ßu
  getCurrentState();
  
  // Th√™m tooltip cho c√°c elements
  statusElement.title = 'Tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa proxy';
  toggleBtn.title = 'Click ƒë·ªÉ b·∫≠t/t·∫Øt proxy (Space/Enter)';
  
  console.log('MaxImg Proxy popup loaded');
});